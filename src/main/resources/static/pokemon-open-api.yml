openapi: 3.0.3
info:
  title: Swagger Pokemon - OpenAPI 3.0
  description: |-
    Coding challenge on Pokemon based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io).
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: pokemon
    description: Everything about Pokemon
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /pokemons:
    get:
      tags:
        - pokemon
      summary: Find all pokemons with pagination
      description: Get pokemons paginated
      operationId: getPokemons
      parameters:
        - { in: query, name: page, schema: { type: integer } }
        - { in: query, name: per_page, schema: { type: integer } }
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedResult"

    post:
      tags:
        - pokemon
      summary: Create a pokemon
      description: Add a new pokemon
      operationId: addPokemon
      requestBody:
        description: Create a new pokemon
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokemonWriteDto'
      responses:
        '201':
          description: Pokemon created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonReadDto'
        '400':
          description: Bad Request - Invalid input
  /pokemons/{id}:
    delete:
      tags:
        - pokemon
      summary: Delete pokemon by ID
      description: Delete a single pokemon
      operationId: deletePokemonById
      parameters:
        - name: id
          in: path
          description: ID of pokemon to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation
    get:
      tags:
        - pokemon
      summary: Find pokemon by ID
      description: Returns a single pokemon
      operationId: getPokemonById
      parameters:
        - name: id
          in: path
          description: ID of pokemon to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonReadDto'
        '404':
          description: Pokemon not found

    put:
      tags:
        - pokemon
      summary: Update an existing pokemon
      description: Update an existing pokemon by Id
      operationId: updatePokemon
      parameters:
        - name: id
          in: path
          description: ID of pokemon
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent pokemon
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PokemonWriteDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonReadDto'
        '400':
          description: Bad Request - Invalid Input
        '404':
          description: Pokemon not found
components:
  schemas:
    PaginatedResult:
      type: object
      properties:
        totalItems:
          type: integer
          format: int64
        currentPage:
          type: integer
        totalPages:
          type: integer
        content: { type: array, items: { $ref: '#/components/schemas/PokemonReadDto' } }  #  any type of items
    PokemonReadDto:
      allOf:
        - $ref: '#/components/schemas/PokemonWriteDto'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 10
            total:
              type: integer
              format: int32
              example: 125
    PokemonWriteDto:
      required:
        - name
        - attack
        - defense
        - generation
        - hp
        - legendary
        - spAtk
        - spDef
        - type1
      type: object
      properties:
        attack:
          type: integer
          format: int32
          example: 10
        defense:
          type: integer
          format: int32
          example: 10
        generation:
          type: integer
          format: int32
          minimum: 1
          maximum: 6
          example: 1
        hp:
          type: integer
          format: int32
          example: 55
        legendary:
          type: boolean
          example: True
        name:
          type: string
          uniqueItems: True
          example: Bulbasaur
        spAtk:
          type: integer
          format: int32
          example: 50
        spDef:
          type: integer
          format: int32
          example: 20
        speed:
          type: integer
          format: int32
          example: 10
        type1:
          $ref: '#/components/schemas/PokemonType'
        type2:
          $ref: '#/components/schemas/PokemonType'
    PokemonType:
      type: string
      enum:
        - BUG
        - DARK
        - DRAGON
        - ELECTRIC
        - FAIRY
        - FIGHTING
        - FIRE
        - FLYING
        - GHOST
        - GRASS
        - GROUND
        - ICE
        - NORMAL
        - POISON
        - PSYCHIC
        - ROCK
        - STEEL
        - WATER